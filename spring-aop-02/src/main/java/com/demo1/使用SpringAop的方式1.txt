1、实现SpringAOP方式一：【自定义来实现AOP】在xml中自定义切面

2、配置如下：
<aop:config>
        <!-- 定义切点_com.demo.dao.impl.UserDaoImpl下所有的方法（不限制参数和返回值）-->
        <aop:pointcut id="myPoint" expression="execution(* com.demo1.dao.impl.*.*(..))"/>

        <!-- 配置切面 -->
        <aop:aspect ref="myAspectXml" order="0">
            <!--
                注意：切点表达式中的args(uName, ..)匹配的是切点方法的参数，通过这种指定后对应的Advice处理方法在执行时将接收到与之对应的切入点方法参数的值。
                而如<aop:after-returning> 标签上的arg-names属性是用于指定在切点表达式中应用的参数名与Advice方法参数是如何对应的，
                arg-names中指定的参数名必须与切点表达式中的一致，可以与Advice方法中的参数名不一致
            -->
            <aop:pointcut id="argPointCut" expression="execution(* com.demo1.dao.impl.*.*(String)) and args(uName, ..)"/>
            <aop:before method="before" pointcut-ref="argPointCut"></aop:before>
            <aop:after-returning method="afterReturning" pointcut-ref="argPointCut" returning="returnVal"
                                 arg-names="returnVal,uName"></aop:after-returning>
            <aop:around method="around" pointcut-ref="myPoint"></aop:around>
            <aop:after-throwing method="afterThrowing" pointcut-ref="myPoint" throwing="throwable"></aop:after-throwing>
            <aop:after method="after" pointcut-ref="myPoint"></aop:after>
        </aop:aspect>

    </aop:config>